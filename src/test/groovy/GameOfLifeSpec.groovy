/*
 * This Spock specification was auto generated by running 'gradle init --type groovy-library'
 * by 'robert.patrick' at '21/05/15 08:52' with Gradle 2.2.1
 *
 * @author robert.patrick, @date 21/05/15 08:52
 */


import com.google.common.collect.Table
import com.google.common.collect.TreeBasedTable
import spock.lang.Specification
import spock.lang.Unroll

class GameOfLifeSpec extends Specification {

    Table<Integer, Integer, Boolean> defaultGrid = TreeBasedTable.create()

    def setup() {
        defaultGrid.put(0, 0, Boolean.FALSE)
        defaultGrid.put(0, 1, Boolean.TRUE)
        defaultGrid.put(0, 2, Boolean.FALSE)
        defaultGrid.put(1, 0, Boolean.FALSE)
        defaultGrid.put(1, 1, Boolean.TRUE)
        defaultGrid.put(1, 2, Boolean.FALSE)
        defaultGrid.put(2, 0, Boolean.FALSE)
        defaultGrid.put(2, 1, Boolean.TRUE)
        defaultGrid.put(2, 2, Boolean.FALSE)
    }

    @Unroll
    def "Test getLiveNeighbours() all scenarios #row, #col = #result"() {
        setup: "With a default grid pattern"
        GameOfLife gol = new GameOfLife()


        expect:
        result == gol.getLiveNeighbours(defaultGrid, row, col)

        where:
        row | col || result
        0   | 0   || 2
        0   | 1   || 1
        0   | 2   || 2
        1   | 0   || 3
        1   | 1   || 2
        1   | 2   || 3
        2   | 0   || 2
        2   | 1   || 1
        2   | 2   || 2

    }

    @Unroll
    def "Test getLiveNeighbours() all out of bounds scenarios #row, #col = #result"() {
        setup: "With a default grid pattern"
        GameOfLife gol = new GameOfLife()

        expect:
        result == gol.getLiveNeighbours(defaultGrid, row, col)

        where:
        row | col || result
        -1  | -1  || 0
        4   | 4   || 0

    }

    @Unroll
    def "Test life"() {
        setup: "With a default grid pattern"
        GameOfLife gol = new GameOfLife()

        when:
        println "Generation 1"
        gol.printThisGeneration( defaultGrid )
        Table gen2 = gol.life( defaultGrid )
        println "\nGeneration 2"
        gol.printThisGeneration( gen2 )
        println "\nGeneration 3"
        Table gen3 = gol.life( gen2 )
        gol.printThisGeneration( gen3 )
        println "\nGeneration 4"
        Table gen4 = gol.life( gen3 )
        gol.printThisGeneration( gen4 )

        then:
        true
    }
}
